// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/byteplus-sdk/pulumi-bytepluscc/sdk/go/bytepluscc/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ListenerDomainExtension struct {
	// 域名使用的服务器证书 ID 。当证书来源为 certCenter 时生效。
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
	CertificateId *string `pulumi:"certificateId"`
	// 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
	CertificateSource *string `pulumi:"certificateSource"`
	// 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
	Domain *string `pulumi:"domain"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId *string `pulumi:"pcaLeafCertificateId"`
	// 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
	San *string `pulumi:"san"`
}

// ListenerDomainExtensionInput is an input type that accepts ListenerDomainExtensionArgs and ListenerDomainExtensionOutput values.
// You can construct a concrete instance of `ListenerDomainExtensionInput` via:
//
//	ListenerDomainExtensionArgs{...}
type ListenerDomainExtensionInput interface {
	pulumi.Input

	ToListenerDomainExtensionOutput() ListenerDomainExtensionOutput
	ToListenerDomainExtensionOutputWithContext(context.Context) ListenerDomainExtensionOutput
}

type ListenerDomainExtensionArgs struct {
	// 域名使用的服务器证书 ID 。当证书来源为 certCenter 时生效。
	CertCenterCertificateId pulumi.StringPtrInput `pulumi:"certCenterCertificateId"`
	// 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
	CertificateSource pulumi.StringPtrInput `pulumi:"certificateSource"`
	// 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId pulumi.StringPtrInput `pulumi:"pcaLeafCertificateId"`
	// 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
	San pulumi.StringPtrInput `pulumi:"san"`
}

func (ListenerDomainExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDomainExtension)(nil)).Elem()
}

func (i ListenerDomainExtensionArgs) ToListenerDomainExtensionOutput() ListenerDomainExtensionOutput {
	return i.ToListenerDomainExtensionOutputWithContext(context.Background())
}

func (i ListenerDomainExtensionArgs) ToListenerDomainExtensionOutputWithContext(ctx context.Context) ListenerDomainExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDomainExtensionOutput)
}

// ListenerDomainExtensionArrayInput is an input type that accepts ListenerDomainExtensionArray and ListenerDomainExtensionArrayOutput values.
// You can construct a concrete instance of `ListenerDomainExtensionArrayInput` via:
//
//	ListenerDomainExtensionArray{ ListenerDomainExtensionArgs{...} }
type ListenerDomainExtensionArrayInput interface {
	pulumi.Input

	ToListenerDomainExtensionArrayOutput() ListenerDomainExtensionArrayOutput
	ToListenerDomainExtensionArrayOutputWithContext(context.Context) ListenerDomainExtensionArrayOutput
}

type ListenerDomainExtensionArray []ListenerDomainExtensionInput

func (ListenerDomainExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerDomainExtension)(nil)).Elem()
}

func (i ListenerDomainExtensionArray) ToListenerDomainExtensionArrayOutput() ListenerDomainExtensionArrayOutput {
	return i.ToListenerDomainExtensionArrayOutputWithContext(context.Background())
}

func (i ListenerDomainExtensionArray) ToListenerDomainExtensionArrayOutputWithContext(ctx context.Context) ListenerDomainExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDomainExtensionArrayOutput)
}

type ListenerDomainExtensionOutput struct{ *pulumi.OutputState }

func (ListenerDomainExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDomainExtension)(nil)).Elem()
}

func (o ListenerDomainExtensionOutput) ToListenerDomainExtensionOutput() ListenerDomainExtensionOutput {
	return o
}

func (o ListenerDomainExtensionOutput) ToListenerDomainExtensionOutputWithContext(ctx context.Context) ListenerDomainExtensionOutput {
	return o
}

// 域名使用的服务器证书 ID 。当证书来源为 certCenter 时生效。
func (o ListenerDomainExtensionOutput) CertCenterCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerDomainExtension) *string { return v.CertCenterCertificateId }).(pulumi.StringPtrOutput)
}

// 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
func (o ListenerDomainExtensionOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerDomainExtension) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
func (o ListenerDomainExtensionOutput) CertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerDomainExtension) *string { return v.CertificateSource }).(pulumi.StringPtrOutput)
}

// 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
func (o ListenerDomainExtensionOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerDomainExtension) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
func (o ListenerDomainExtensionOutput) PcaLeafCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerDomainExtension) *string { return v.PcaLeafCertificateId }).(pulumi.StringPtrOutput)
}

// 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
func (o ListenerDomainExtensionOutput) San() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerDomainExtension) *string { return v.San }).(pulumi.StringPtrOutput)
}

type ListenerDomainExtensionArrayOutput struct{ *pulumi.OutputState }

func (ListenerDomainExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerDomainExtension)(nil)).Elem()
}

func (o ListenerDomainExtensionArrayOutput) ToListenerDomainExtensionArrayOutput() ListenerDomainExtensionArrayOutput {
	return o
}

func (o ListenerDomainExtensionArrayOutput) ToListenerDomainExtensionArrayOutputWithContext(ctx context.Context) ListenerDomainExtensionArrayOutput {
	return o
}

func (o ListenerDomainExtensionArrayOutput) Index(i pulumi.IntInput) ListenerDomainExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerDomainExtension {
		return vs[0].([]ListenerDomainExtension)[vs[1].(int)]
	}).(ListenerDomainExtensionOutput)
}

type ListenerServerGroup struct {
	// 服务器组 ID 。
	ServerGroupId *string `pulumi:"serverGroupId"`
	// 服务器组名称。
	ServerGroupName *string `pulumi:"serverGroupName"`
}

// ListenerServerGroupInput is an input type that accepts ListenerServerGroupArgs and ListenerServerGroupOutput values.
// You can construct a concrete instance of `ListenerServerGroupInput` via:
//
//	ListenerServerGroupArgs{...}
type ListenerServerGroupInput interface {
	pulumi.Input

	ToListenerServerGroupOutput() ListenerServerGroupOutput
	ToListenerServerGroupOutputWithContext(context.Context) ListenerServerGroupOutput
}

type ListenerServerGroupArgs struct {
	// 服务器组 ID 。
	ServerGroupId pulumi.StringPtrInput `pulumi:"serverGroupId"`
	// 服务器组名称。
	ServerGroupName pulumi.StringPtrInput `pulumi:"serverGroupName"`
}

func (ListenerServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerServerGroup)(nil)).Elem()
}

func (i ListenerServerGroupArgs) ToListenerServerGroupOutput() ListenerServerGroupOutput {
	return i.ToListenerServerGroupOutputWithContext(context.Background())
}

func (i ListenerServerGroupArgs) ToListenerServerGroupOutputWithContext(ctx context.Context) ListenerServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerServerGroupOutput)
}

// ListenerServerGroupArrayInput is an input type that accepts ListenerServerGroupArray and ListenerServerGroupArrayOutput values.
// You can construct a concrete instance of `ListenerServerGroupArrayInput` via:
//
//	ListenerServerGroupArray{ ListenerServerGroupArgs{...} }
type ListenerServerGroupArrayInput interface {
	pulumi.Input

	ToListenerServerGroupArrayOutput() ListenerServerGroupArrayOutput
	ToListenerServerGroupArrayOutputWithContext(context.Context) ListenerServerGroupArrayOutput
}

type ListenerServerGroupArray []ListenerServerGroupInput

func (ListenerServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerServerGroup)(nil)).Elem()
}

func (i ListenerServerGroupArray) ToListenerServerGroupArrayOutput() ListenerServerGroupArrayOutput {
	return i.ToListenerServerGroupArrayOutputWithContext(context.Background())
}

func (i ListenerServerGroupArray) ToListenerServerGroupArrayOutputWithContext(ctx context.Context) ListenerServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerServerGroupArrayOutput)
}

type ListenerServerGroupOutput struct{ *pulumi.OutputState }

func (ListenerServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerServerGroup)(nil)).Elem()
}

func (o ListenerServerGroupOutput) ToListenerServerGroupOutput() ListenerServerGroupOutput {
	return o
}

func (o ListenerServerGroupOutput) ToListenerServerGroupOutputWithContext(ctx context.Context) ListenerServerGroupOutput {
	return o
}

// 服务器组 ID 。
func (o ListenerServerGroupOutput) ServerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerServerGroup) *string { return v.ServerGroupId }).(pulumi.StringPtrOutput)
}

// 服务器组名称。
func (o ListenerServerGroupOutput) ServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerServerGroup) *string { return v.ServerGroupName }).(pulumi.StringPtrOutput)
}

type ListenerServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ListenerServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerServerGroup)(nil)).Elem()
}

func (o ListenerServerGroupArrayOutput) ToListenerServerGroupArrayOutput() ListenerServerGroupArrayOutput {
	return o
}

func (o ListenerServerGroupArrayOutput) ToListenerServerGroupArrayOutputWithContext(ctx context.Context) ListenerServerGroupArrayOutput {
	return o
}

func (o ListenerServerGroupArrayOutput) Index(i pulumi.IntInput) ListenerServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerServerGroup {
		return vs[0].([]ListenerServerGroup)[vs[1].(int)]
	}).(ListenerServerGroupOutput)
}

type ListenerTag struct {
	// 用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。
	Value *string `pulumi:"value"`
}

// ListenerTagInput is an input type that accepts ListenerTagArgs and ListenerTagOutput values.
// You can construct a concrete instance of `ListenerTagInput` via:
//
//	ListenerTagArgs{...}
type ListenerTagInput interface {
	pulumi.Input

	ToListenerTagOutput() ListenerTagOutput
	ToListenerTagOutputWithContext(context.Context) ListenerTagOutput
}

type ListenerTagArgs struct {
	// 用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (i ListenerTagArgs) ToListenerTagOutput() ListenerTagOutput {
	return i.ToListenerTagOutputWithContext(context.Background())
}

func (i ListenerTagArgs) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagOutput)
}

// ListenerTagArrayInput is an input type that accepts ListenerTagArray and ListenerTagArrayOutput values.
// You can construct a concrete instance of `ListenerTagArrayInput` via:
//
//	ListenerTagArray{ ListenerTagArgs{...} }
type ListenerTagArrayInput interface {
	pulumi.Input

	ToListenerTagArrayOutput() ListenerTagArrayOutput
	ToListenerTagArrayOutputWithContext(context.Context) ListenerTagArrayOutput
}

type ListenerTagArray []ListenerTagInput

func (ListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (i ListenerTagArray) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return i.ToListenerTagArrayOutputWithContext(context.Background())
}

func (i ListenerTagArray) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagArrayOutput)
}

type ListenerTagOutput struct{ *pulumi.OutputState }

func (ListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (o ListenerTagOutput) ToListenerTagOutput() ListenerTagOutput {
	return o
}

func (o ListenerTagOutput) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return o
}

// 用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。
func (o ListenerTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。
func (o ListenerTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ListenerTagArrayOutput struct{ *pulumi.OutputState }

func (ListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) Index(i pulumi.IntInput) ListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerTag {
		return vs[0].([]ListenerTag)[vs[1].(int)]
	}).(ListenerTagOutput)
}

type GetListenerDomainExtension struct {
	// 域名使用的服务器证书 ID 。当证书来源为 certCenter 时生效。
	CertCenterCertificateId string `pulumi:"certCenterCertificateId"`
	// 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
	CertificateId string `pulumi:"certificateId"`
	// 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
	CertificateSource string `pulumi:"certificateSource"`
	// 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
	Domain string `pulumi:"domain"`
	// 扩展域名 ID 。
	DomainExtensionId string `pulumi:"domainExtensionId"`
	// 扩展域名所属的监听器 ID。
	ListenerId string `pulumi:"listenerId"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId string `pulumi:"pcaLeafCertificateId"`
	// 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
	San string `pulumi:"san"`
}

// GetListenerDomainExtensionInput is an input type that accepts GetListenerDomainExtensionArgs and GetListenerDomainExtensionOutput values.
// You can construct a concrete instance of `GetListenerDomainExtensionInput` via:
//
//	GetListenerDomainExtensionArgs{...}
type GetListenerDomainExtensionInput interface {
	pulumi.Input

	ToGetListenerDomainExtensionOutput() GetListenerDomainExtensionOutput
	ToGetListenerDomainExtensionOutputWithContext(context.Context) GetListenerDomainExtensionOutput
}

type GetListenerDomainExtensionArgs struct {
	// 域名使用的服务器证书 ID 。当证书来源为 certCenter 时生效。
	CertCenterCertificateId pulumi.StringInput `pulumi:"certCenterCertificateId"`
	// 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
	CertificateSource pulumi.StringInput `pulumi:"certificateSource"`
	// 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
	Domain pulumi.StringInput `pulumi:"domain"`
	// 扩展域名 ID 。
	DomainExtensionId pulumi.StringInput `pulumi:"domainExtensionId"`
	// 扩展域名所属的监听器 ID。
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId pulumi.StringInput `pulumi:"pcaLeafCertificateId"`
	// 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
	San pulumi.StringInput `pulumi:"san"`
}

func (GetListenerDomainExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDomainExtension)(nil)).Elem()
}

func (i GetListenerDomainExtensionArgs) ToGetListenerDomainExtensionOutput() GetListenerDomainExtensionOutput {
	return i.ToGetListenerDomainExtensionOutputWithContext(context.Background())
}

func (i GetListenerDomainExtensionArgs) ToGetListenerDomainExtensionOutputWithContext(ctx context.Context) GetListenerDomainExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDomainExtensionOutput)
}

// GetListenerDomainExtensionArrayInput is an input type that accepts GetListenerDomainExtensionArray and GetListenerDomainExtensionArrayOutput values.
// You can construct a concrete instance of `GetListenerDomainExtensionArrayInput` via:
//
//	GetListenerDomainExtensionArray{ GetListenerDomainExtensionArgs{...} }
type GetListenerDomainExtensionArrayInput interface {
	pulumi.Input

	ToGetListenerDomainExtensionArrayOutput() GetListenerDomainExtensionArrayOutput
	ToGetListenerDomainExtensionArrayOutputWithContext(context.Context) GetListenerDomainExtensionArrayOutput
}

type GetListenerDomainExtensionArray []GetListenerDomainExtensionInput

func (GetListenerDomainExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerDomainExtension)(nil)).Elem()
}

func (i GetListenerDomainExtensionArray) ToGetListenerDomainExtensionArrayOutput() GetListenerDomainExtensionArrayOutput {
	return i.ToGetListenerDomainExtensionArrayOutputWithContext(context.Background())
}

func (i GetListenerDomainExtensionArray) ToGetListenerDomainExtensionArrayOutputWithContext(ctx context.Context) GetListenerDomainExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDomainExtensionArrayOutput)
}

type GetListenerDomainExtensionOutput struct{ *pulumi.OutputState }

func (GetListenerDomainExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDomainExtension)(nil)).Elem()
}

func (o GetListenerDomainExtensionOutput) ToGetListenerDomainExtensionOutput() GetListenerDomainExtensionOutput {
	return o
}

func (o GetListenerDomainExtensionOutput) ToGetListenerDomainExtensionOutputWithContext(ctx context.Context) GetListenerDomainExtensionOutput {
	return o
}

// 域名使用的服务器证书 ID 。当证书来源为 certCenter 时生效。
func (o GetListenerDomainExtensionOutput) CertCenterCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.CertCenterCertificateId }).(pulumi.StringOutput)
}

// 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
func (o GetListenerDomainExtensionOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.CertificateId }).(pulumi.StringOutput)
}

// 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
func (o GetListenerDomainExtensionOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
func (o GetListenerDomainExtensionOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.Domain }).(pulumi.StringOutput)
}

// 扩展域名 ID 。
func (o GetListenerDomainExtensionOutput) DomainExtensionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.DomainExtensionId }).(pulumi.StringOutput)
}

// 扩展域名所属的监听器 ID。
func (o GetListenerDomainExtensionOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.ListenerId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
func (o GetListenerDomainExtensionOutput) PcaLeafCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.PcaLeafCertificateId }).(pulumi.StringOutput)
}

// 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
func (o GetListenerDomainExtensionOutput) San() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerDomainExtension) string { return v.San }).(pulumi.StringOutput)
}

type GetListenerDomainExtensionArrayOutput struct{ *pulumi.OutputState }

func (GetListenerDomainExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerDomainExtension)(nil)).Elem()
}

func (o GetListenerDomainExtensionArrayOutput) ToGetListenerDomainExtensionArrayOutput() GetListenerDomainExtensionArrayOutput {
	return o
}

func (o GetListenerDomainExtensionArrayOutput) ToGetListenerDomainExtensionArrayOutputWithContext(ctx context.Context) GetListenerDomainExtensionArrayOutput {
	return o
}

func (o GetListenerDomainExtensionArrayOutput) Index(i pulumi.IntInput) GetListenerDomainExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListenerDomainExtension {
		return vs[0].([]GetListenerDomainExtension)[vs[1].(int)]
	}).(GetListenerDomainExtensionOutput)
}

type GetListenerServerGroup struct {
	// 服务器组 ID 。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 服务器组名称。
	ServerGroupName string `pulumi:"serverGroupName"`
}

// GetListenerServerGroupInput is an input type that accepts GetListenerServerGroupArgs and GetListenerServerGroupOutput values.
// You can construct a concrete instance of `GetListenerServerGroupInput` via:
//
//	GetListenerServerGroupArgs{...}
type GetListenerServerGroupInput interface {
	pulumi.Input

	ToGetListenerServerGroupOutput() GetListenerServerGroupOutput
	ToGetListenerServerGroupOutputWithContext(context.Context) GetListenerServerGroupOutput
}

type GetListenerServerGroupArgs struct {
	// 服务器组 ID 。
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// 服务器组名称。
	ServerGroupName pulumi.StringInput `pulumi:"serverGroupName"`
}

func (GetListenerServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerServerGroup)(nil)).Elem()
}

func (i GetListenerServerGroupArgs) ToGetListenerServerGroupOutput() GetListenerServerGroupOutput {
	return i.ToGetListenerServerGroupOutputWithContext(context.Background())
}

func (i GetListenerServerGroupArgs) ToGetListenerServerGroupOutputWithContext(ctx context.Context) GetListenerServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerServerGroupOutput)
}

// GetListenerServerGroupArrayInput is an input type that accepts GetListenerServerGroupArray and GetListenerServerGroupArrayOutput values.
// You can construct a concrete instance of `GetListenerServerGroupArrayInput` via:
//
//	GetListenerServerGroupArray{ GetListenerServerGroupArgs{...} }
type GetListenerServerGroupArrayInput interface {
	pulumi.Input

	ToGetListenerServerGroupArrayOutput() GetListenerServerGroupArrayOutput
	ToGetListenerServerGroupArrayOutputWithContext(context.Context) GetListenerServerGroupArrayOutput
}

type GetListenerServerGroupArray []GetListenerServerGroupInput

func (GetListenerServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerServerGroup)(nil)).Elem()
}

func (i GetListenerServerGroupArray) ToGetListenerServerGroupArrayOutput() GetListenerServerGroupArrayOutput {
	return i.ToGetListenerServerGroupArrayOutputWithContext(context.Background())
}

func (i GetListenerServerGroupArray) ToGetListenerServerGroupArrayOutputWithContext(ctx context.Context) GetListenerServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerServerGroupArrayOutput)
}

type GetListenerServerGroupOutput struct{ *pulumi.OutputState }

func (GetListenerServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerServerGroup)(nil)).Elem()
}

func (o GetListenerServerGroupOutput) ToGetListenerServerGroupOutput() GetListenerServerGroupOutput {
	return o
}

func (o GetListenerServerGroupOutput) ToGetListenerServerGroupOutputWithContext(ctx context.Context) GetListenerServerGroupOutput {
	return o
}

// 服务器组 ID 。
func (o GetListenerServerGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerServerGroup) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 服务器组名称。
func (o GetListenerServerGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerServerGroup) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

type GetListenerServerGroupArrayOutput struct{ *pulumi.OutputState }

func (GetListenerServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerServerGroup)(nil)).Elem()
}

func (o GetListenerServerGroupArrayOutput) ToGetListenerServerGroupArrayOutput() GetListenerServerGroupArrayOutput {
	return o
}

func (o GetListenerServerGroupArrayOutput) ToGetListenerServerGroupArrayOutputWithContext(ctx context.Context) GetListenerServerGroupArrayOutput {
	return o
}

func (o GetListenerServerGroupArrayOutput) Index(i pulumi.IntInput) GetListenerServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListenerServerGroup {
		return vs[0].([]GetListenerServerGroup)[vs[1].(int)]
	}).(GetListenerServerGroupOutput)
}

type GetListenerTag struct {
	// 用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。
	Key string `pulumi:"key"`
	// 用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。
	Value string `pulumi:"value"`
}

// GetListenerTagInput is an input type that accepts GetListenerTagArgs and GetListenerTagOutput values.
// You can construct a concrete instance of `GetListenerTagInput` via:
//
//	GetListenerTagArgs{...}
type GetListenerTagInput interface {
	pulumi.Input

	ToGetListenerTagOutput() GetListenerTagOutput
	ToGetListenerTagOutputWithContext(context.Context) GetListenerTagOutput
}

type GetListenerTagArgs struct {
	// 用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerTag)(nil)).Elem()
}

func (i GetListenerTagArgs) ToGetListenerTagOutput() GetListenerTagOutput {
	return i.ToGetListenerTagOutputWithContext(context.Background())
}

func (i GetListenerTagArgs) ToGetListenerTagOutputWithContext(ctx context.Context) GetListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerTagOutput)
}

// GetListenerTagArrayInput is an input type that accepts GetListenerTagArray and GetListenerTagArrayOutput values.
// You can construct a concrete instance of `GetListenerTagArrayInput` via:
//
//	GetListenerTagArray{ GetListenerTagArgs{...} }
type GetListenerTagArrayInput interface {
	pulumi.Input

	ToGetListenerTagArrayOutput() GetListenerTagArrayOutput
	ToGetListenerTagArrayOutputWithContext(context.Context) GetListenerTagArrayOutput
}

type GetListenerTagArray []GetListenerTagInput

func (GetListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerTag)(nil)).Elem()
}

func (i GetListenerTagArray) ToGetListenerTagArrayOutput() GetListenerTagArrayOutput {
	return i.ToGetListenerTagArrayOutputWithContext(context.Background())
}

func (i GetListenerTagArray) ToGetListenerTagArrayOutputWithContext(ctx context.Context) GetListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerTagArrayOutput)
}

type GetListenerTagOutput struct{ *pulumi.OutputState }

func (GetListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerTag)(nil)).Elem()
}

func (o GetListenerTagOutput) ToGetListenerTagOutput() GetListenerTagOutput {
	return o
}

func (o GetListenerTagOutput) ToGetListenerTagOutputWithContext(ctx context.Context) GetListenerTagOutput {
	return o
}

// 用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。
func (o GetListenerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。
func (o GetListenerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetListenerTagArrayOutput struct{ *pulumi.OutputState }

func (GetListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerTag)(nil)).Elem()
}

func (o GetListenerTagArrayOutput) ToGetListenerTagArrayOutput() GetListenerTagArrayOutput {
	return o
}

func (o GetListenerTagArrayOutput) ToGetListenerTagArrayOutputWithContext(ctx context.Context) GetListenerTagArrayOutput {
	return o
}

func (o GetListenerTagArrayOutput) Index(i pulumi.IntInput) GetListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListenerTag {
		return vs[0].([]GetListenerTag)[vs[1].(int)]
	}).(GetListenerTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDomainExtensionInput)(nil)).Elem(), ListenerDomainExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDomainExtensionArrayInput)(nil)).Elem(), ListenerDomainExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerServerGroupInput)(nil)).Elem(), ListenerServerGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerServerGroupArrayInput)(nil)).Elem(), ListenerServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagInput)(nil)).Elem(), ListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagArrayInput)(nil)).Elem(), ListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerDomainExtensionInput)(nil)).Elem(), GetListenerDomainExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerDomainExtensionArrayInput)(nil)).Elem(), GetListenerDomainExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerServerGroupInput)(nil)).Elem(), GetListenerServerGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerServerGroupArrayInput)(nil)).Elem(), GetListenerServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerTagInput)(nil)).Elem(), GetListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerTagArrayInput)(nil)).Elem(), GetListenerTagArray{})
	pulumi.RegisterOutputType(ListenerDomainExtensionOutput{})
	pulumi.RegisterOutputType(ListenerDomainExtensionArrayOutput{})
	pulumi.RegisterOutputType(ListenerServerGroupOutput{})
	pulumi.RegisterOutputType(ListenerServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ListenerTagOutput{})
	pulumi.RegisterOutputType(ListenerTagArrayOutput{})
	pulumi.RegisterOutputType(GetListenerDomainExtensionOutput{})
	pulumi.RegisterOutputType(GetListenerDomainExtensionArrayOutput{})
	pulumi.RegisterOutputType(GetListenerServerGroupOutput{})
	pulumi.RegisterOutputType(GetListenerServerGroupArrayOutput{})
	pulumi.RegisterOutputType(GetListenerTagOutput{})
	pulumi.RegisterOutputType(GetListenerTagArrayOutput{})
}
