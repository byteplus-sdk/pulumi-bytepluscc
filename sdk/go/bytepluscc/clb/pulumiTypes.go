// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/byteplus-sdk/pulumi-bytepluscc/sdk/go/bytepluscc/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ListenerHealthCheck struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain *string `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled *string `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode *string `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval *int `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method *string `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port *int `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout *int `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect *string `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest *string `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri *string `pulumi:"uri"`
}

// ListenerHealthCheckInput is an input type that accepts ListenerHealthCheckArgs and ListenerHealthCheckOutput values.
// You can construct a concrete instance of `ListenerHealthCheckInput` via:
//
//	ListenerHealthCheckArgs{...}
type ListenerHealthCheckInput interface {
	pulumi.Input

	ToListenerHealthCheckOutput() ListenerHealthCheckOutput
	ToListenerHealthCheckOutputWithContext(context.Context) ListenerHealthCheckOutput
}

type ListenerHealthCheckArgs struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode pulumi.StringPtrInput `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method pulumi.StringPtrInput `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect pulumi.StringPtrInput `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest pulumi.StringPtrInput `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return i.ToListenerHealthCheckOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput)
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput).ToListenerHealthCheckPtrOutputWithContext(ctx)
}

// ListenerHealthCheckPtrInput is an input type that accepts ListenerHealthCheckArgs, ListenerHealthCheckPtr and ListenerHealthCheckPtrOutput values.
// You can construct a concrete instance of `ListenerHealthCheckPtrInput` via:
//
//	        ListenerHealthCheckArgs{...}
//
//	or:
//
//	        nil
type ListenerHealthCheckPtrInput interface {
	pulumi.Input

	ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput
	ToListenerHealthCheckPtrOutputWithContext(context.Context) ListenerHealthCheckPtrOutput
}

type listenerHealthCheckPtrType ListenerHealthCheckArgs

func ListenerHealthCheckPtr(v *ListenerHealthCheckArgs) ListenerHealthCheckPtrInput {
	return (*listenerHealthCheckPtrType)(v)
}

func (*listenerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckPtrOutput)
}

type ListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListenerHealthCheck) *ListenerHealthCheck {
		return &v
	}).(ListenerHealthCheckPtrOutput)
}

// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
func (o ListenerHealthCheckOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
func (o ListenerHealthCheckOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
func (o ListenerHealthCheckOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.HttpCode }).(pulumi.StringPtrOutput)
}

// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
func (o ListenerHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
func (o ListenerHealthCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// 健康检查的端口，取值范围为1-65535。
func (o ListenerHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
func (o ListenerHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.UdpExpect }).(pulumi.StringPtrOutput)
}

// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.UdpRequest }).(pulumi.StringPtrOutput)
}

// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
func (o ListenerHealthCheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ListenerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) Elem() ListenerHealthCheckOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) ListenerHealthCheck {
		if v != nil {
			return *v
		}
		var ret ListenerHealthCheck
		return ret
	}).(ListenerHealthCheckOutput)
}

// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
func (o ListenerHealthCheckPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
func (o ListenerHealthCheckPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
func (o ListenerHealthCheckPtrOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpCode
	}).(pulumi.StringPtrOutput)
}

// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
func (o ListenerHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
func (o ListenerHealthCheckPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// 健康检查的端口，取值范围为1-65535。
func (o ListenerHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
func (o ListenerHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckPtrOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpExpect
	}).(pulumi.StringPtrOutput)
}

// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckPtrOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpRequest
	}).(pulumi.StringPtrOutput)
}

// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
func (o ListenerHealthCheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type ListenerTag struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value *string `pulumi:"value"`
}

// ListenerTagInput is an input type that accepts ListenerTagArgs and ListenerTagOutput values.
// You can construct a concrete instance of `ListenerTagInput` via:
//
//	ListenerTagArgs{...}
type ListenerTagInput interface {
	pulumi.Input

	ToListenerTagOutput() ListenerTagOutput
	ToListenerTagOutputWithContext(context.Context) ListenerTagOutput
}

type ListenerTagArgs struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (i ListenerTagArgs) ToListenerTagOutput() ListenerTagOutput {
	return i.ToListenerTagOutputWithContext(context.Background())
}

func (i ListenerTagArgs) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagOutput)
}

// ListenerTagArrayInput is an input type that accepts ListenerTagArray and ListenerTagArrayOutput values.
// You can construct a concrete instance of `ListenerTagArrayInput` via:
//
//	ListenerTagArray{ ListenerTagArgs{...} }
type ListenerTagArrayInput interface {
	pulumi.Input

	ToListenerTagArrayOutput() ListenerTagArrayOutput
	ToListenerTagArrayOutputWithContext(context.Context) ListenerTagArrayOutput
}

type ListenerTagArray []ListenerTagInput

func (ListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (i ListenerTagArray) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return i.ToListenerTagArrayOutputWithContext(context.Background())
}

func (i ListenerTagArray) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagArrayOutput)
}

type ListenerTagOutput struct{ *pulumi.OutputState }

func (ListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (o ListenerTagOutput) ToListenerTagOutput() ListenerTagOutput {
	return o
}

func (o ListenerTagOutput) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return o
}

// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
func (o ListenerTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
func (o ListenerTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ListenerTagArrayOutput struct{ *pulumi.OutputState }

func (ListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) Index(i pulumi.IntInput) ListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerTag {
		return vs[0].([]ListenerTag)[vs[1].(int)]
	}).(ListenerTagOutput)
}

type GetListenerHealthCheck struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain string `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled string `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode string `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval int `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method string `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port int `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout int `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect string `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest string `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri string `pulumi:"uri"`
}

// GetListenerHealthCheckInput is an input type that accepts GetListenerHealthCheckArgs and GetListenerHealthCheckOutput values.
// You can construct a concrete instance of `GetListenerHealthCheckInput` via:
//
//	GetListenerHealthCheckArgs{...}
type GetListenerHealthCheckInput interface {
	pulumi.Input

	ToGetListenerHealthCheckOutput() GetListenerHealthCheckOutput
	ToGetListenerHealthCheckOutputWithContext(context.Context) GetListenerHealthCheckOutput
}

type GetListenerHealthCheckArgs struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain pulumi.StringInput `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringInput `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode pulumi.StringInput `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval pulumi.IntInput `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method pulumi.StringInput `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port pulumi.IntInput `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect pulumi.StringInput `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest pulumi.StringInput `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerHealthCheck)(nil)).Elem()
}

func (i GetListenerHealthCheckArgs) ToGetListenerHealthCheckOutput() GetListenerHealthCheckOutput {
	return i.ToGetListenerHealthCheckOutputWithContext(context.Background())
}

func (i GetListenerHealthCheckArgs) ToGetListenerHealthCheckOutputWithContext(ctx context.Context) GetListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerHealthCheckOutput)
}

type GetListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerHealthCheck)(nil)).Elem()
}

func (o GetListenerHealthCheckOutput) ToGetListenerHealthCheckOutput() GetListenerHealthCheckOutput {
	return o
}

func (o GetListenerHealthCheckOutput) ToGetListenerHealthCheckOutputWithContext(ctx context.Context) GetListenerHealthCheckOutput {
	return o
}

// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
func (o GetListenerHealthCheckOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Domain }).(pulumi.StringOutput)
}

// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
func (o GetListenerHealthCheckOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Enabled }).(pulumi.StringOutput)
}

// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o GetListenerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
func (o GetListenerHealthCheckOutput) HttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.HttpCode }).(pulumi.StringOutput)
}

// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
func (o GetListenerHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
func (o GetListenerHealthCheckOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Method }).(pulumi.StringOutput)
}

// 健康检查的端口，取值范围为1-65535。
func (o GetListenerHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
func (o GetListenerHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o GetListenerHealthCheckOutput) UdpExpect() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.UdpExpect }).(pulumi.StringOutput)
}

// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o GetListenerHealthCheckOutput) UdpRequest() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.UdpRequest }).(pulumi.StringOutput)
}

// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o GetListenerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
func (o GetListenerHealthCheckOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Uri }).(pulumi.StringOutput)
}

type GetListenerTag struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key string `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value string `pulumi:"value"`
}

// GetListenerTagInput is an input type that accepts GetListenerTagArgs and GetListenerTagOutput values.
// You can construct a concrete instance of `GetListenerTagInput` via:
//
//	GetListenerTagArgs{...}
type GetListenerTagInput interface {
	pulumi.Input

	ToGetListenerTagOutput() GetListenerTagOutput
	ToGetListenerTagOutputWithContext(context.Context) GetListenerTagOutput
}

type GetListenerTagArgs struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerTag)(nil)).Elem()
}

func (i GetListenerTagArgs) ToGetListenerTagOutput() GetListenerTagOutput {
	return i.ToGetListenerTagOutputWithContext(context.Background())
}

func (i GetListenerTagArgs) ToGetListenerTagOutputWithContext(ctx context.Context) GetListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerTagOutput)
}

// GetListenerTagArrayInput is an input type that accepts GetListenerTagArray and GetListenerTagArrayOutput values.
// You can construct a concrete instance of `GetListenerTagArrayInput` via:
//
//	GetListenerTagArray{ GetListenerTagArgs{...} }
type GetListenerTagArrayInput interface {
	pulumi.Input

	ToGetListenerTagArrayOutput() GetListenerTagArrayOutput
	ToGetListenerTagArrayOutputWithContext(context.Context) GetListenerTagArrayOutput
}

type GetListenerTagArray []GetListenerTagInput

func (GetListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerTag)(nil)).Elem()
}

func (i GetListenerTagArray) ToGetListenerTagArrayOutput() GetListenerTagArrayOutput {
	return i.ToGetListenerTagArrayOutputWithContext(context.Background())
}

func (i GetListenerTagArray) ToGetListenerTagArrayOutputWithContext(ctx context.Context) GetListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerTagArrayOutput)
}

type GetListenerTagOutput struct{ *pulumi.OutputState }

func (GetListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerTag)(nil)).Elem()
}

func (o GetListenerTagOutput) ToGetListenerTagOutput() GetListenerTagOutput {
	return o
}

func (o GetListenerTagOutput) ToGetListenerTagOutputWithContext(ctx context.Context) GetListenerTagOutput {
	return o
}

// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
func (o GetListenerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
func (o GetListenerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetListenerTagArrayOutput struct{ *pulumi.OutputState }

func (GetListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerTag)(nil)).Elem()
}

func (o GetListenerTagArrayOutput) ToGetListenerTagArrayOutput() GetListenerTagArrayOutput {
	return o
}

func (o GetListenerTagArrayOutput) ToGetListenerTagArrayOutputWithContext(ctx context.Context) GetListenerTagArrayOutput {
	return o
}

func (o GetListenerTagArrayOutput) Index(i pulumi.IntInput) GetListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListenerTag {
		return vs[0].([]GetListenerTag)[vs[1].(int)]
	}).(GetListenerTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckPtrInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagInput)(nil)).Elem(), ListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagArrayInput)(nil)).Elem(), ListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerHealthCheckInput)(nil)).Elem(), GetListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerTagInput)(nil)).Elem(), GetListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerTagArrayInput)(nil)).Elem(), GetListenerTagArray{})
	pulumi.RegisterOutputType(ListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(ListenerTagOutput{})
	pulumi.RegisterOutputType(ListenerTagArrayOutput{})
	pulumi.RegisterOutputType(GetListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetListenerTagOutput{})
	pulumi.RegisterOutputType(GetListenerTagArrayOutput{})
}
